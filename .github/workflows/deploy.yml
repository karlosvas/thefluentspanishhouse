name: Deploy to Vercel

on:
  push:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "21.2.0"
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./client
      - name: Build frontend
        run: npm run build
        working-directory: ./client
      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./client/dist

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "21.2.0"
      - name: Install backend dependencies
        run: npm install
        working-directory: ./server
      - name: Build backend
        run: npm run build
        working-directory: ./server
      - name: Upload backend build
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: ./server/public

  deploy-both:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      # Frontend deployment
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./client/dist
      - name: Deploy frontend
        run: |
          vercel link --yes --project ${{ secrets.FRONTEND_PROJECT_ID }} --scope ${{ secrets.VERCEL_TEAM }} --token=${{ secrets.VERCEL_TOKEN }}
          vercel --token ${{ secrets.VERCEL_TOKEN }}
        working-directory: ./client

      # Backend deployment
      - name: Download backend build
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: ./server/public

      # Obtenemos un puerto aleatorio en env.PORT
      - name: Start server
        run: |
          PORT=$(node -e "console.log(require('get-port-sync')())")
          echo "PORT=$PORT" >> $GITHUB_ENV
        working-directory: ./server
      
        # Instalamos dependencias
      - name: Install backend dependencies
        run: |
          npm install
          npx playwright install --with-deps
        working-directory: ./server

      # Ejecutamos los test para asegurarnos que todo est√° en orden
      - name: Run Playwright tests
        run: npm run test
        env:
          PORT: ${{ env.PORT }}
      
      # Desplegamos en vercel
      - name: Deploy backend
        run: |
          vercel link --yes --project ${{ secrets.BACKEND_PROJECT_ID }} --scope ${{ secrets.VERCEL_TEAM }} --token=${{ secrets.VERCEL_TOKEN }}
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel --token ${{ secrets.VERCEL_TOKEN }}
        working-directory: ./server